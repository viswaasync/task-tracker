<!DOCTYPE html>
<html>
<head>
  <title>Research Group Task Tracker</title>
  <style>
/*
  .input-form {
    margin-bottom: 20px;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
  }

  .input-form label {
    margin-right: 5px;
  }

  .input-form input[type="text"],
  .input-form select {
    padding: 5px;
    width: 180px;
  }

  .input-form button {
    margin-left: 10px;
  }
*/

  .update-button {
    background-color: #1DA1F2;
    color: #fff;
    border: none;
    padding: 8px 16px;
    font-size: 14px;
    border-radius: 4px;
    cursor: pointer;
  }



  .menu-bar h2 {
    flex-grow: 1;
    text-align: center;
    margin: 0;
  }

  /* Remaining CSS styles */
    body {
      font-family: 'Roboto', sans-serif;
      margin: 0;
      padding: 0;
    }
    h1 {
      text-align: center;
      padding: 20px;
    }
    .menu-bar {
      background-color: #1DA1F2;
      display: block;
      justify-content: flex-start;
      align-items: center;
      padding: 10px;
      color: #fff;
    }
    .menu-bar a {
      color: #fff;
      text-decoration: none;
      margin: 0 10px;
      padding: 5px;
    }
    .menu-bar a:hover {
      background-color: rgba(255, 255, 255, 0.1);
      border-radius: 4px;
    }
    .landing-section {
      text-align: left;
      padding-left: 25px;
    }
    .input-form {
      margin-bottom: 20px;
      text-align: left;
    }
    .input-form input[type="text"],
    .input-form select {
      padding: 5px;
      width: 200px;
    }
    .tabs {
      overflow: hidden;
      background-color: #f2f2f2;
    }
    .tabs button {
      background-color: inherit;
      border: none;
      outline: none;
      cursor: pointer;
      padding: 14px 16px;
      transition: 0.3s;
      font-size: 17px;
    }
    .tabs button:hover {
      background-color: #ddd;
    }
    .tabs button.active {
      background-color: #ccc;
    }
    table {
      width: 100%;
      border-collapse: collapse;
    }
    th, td {
      border: 1px solid #ccc;
      padding: 8px;
      text-align: center;
    }
    th {
      background-color: #f2f2f2;
    }
    td:hover {
      background-color: #f9f9f9;
      cursor: pointer;
    }
    .selected {
      background-color: #c8e6c9;
    }
  </style>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
</head>
<body>
  <div class="menu-bar">
    <div>
      <a href="#">Home</a>
      <a href="#">View</a>
      <a href="#">Update</a>
    </div>
    <div>
     <h2>Research Group Task Tracker</h2>
    </div>
  </div>

  

  <div class="landing-section">
    <h2>Task Assignment Form</h2>
    <div class="input-form">
      <label for="week">Week Number:</label>
      <input type="text" id="week" placeholder="Week number"><br><br>
      <label for="order">Order Number:</label>
      <input type="text" id="order" placeholder="Order number"><br><br>
      <label for="project">Project:</label>
      <select id="project">
        <option value="PROBIO">PROBIO</option>
        <option value="CRCR">CRCR</option>
        <option value="IPCM">IPCM</option>
        <option value="PSFF">PSFF</option>
      </select><br><br>
      <label for="task">Task:</label>
      <select id="task">
        <option value="lab">Lab Work</option>
        <option value="analysis">Data Analysis</option>
        <option value="curation">Data Curation</option>
      </select><br><br>
      <label for="responsible">Responsible:</label>
      <select id="responsible">
        <option value="Johan">Johan</option>
        <option value="Markus">Markus</option>
        <option value="Rebecka">Rebecka</option>
        <option value="Anu">Anu</option>
        <option value="Preeti">Preeti</option>
        <option value="Venki">Venki</option>
        <option value="Sarath">Sarath</option>
        <option value="Nawal">Nawal</option>
        <option value="Karthick">Karthick</option>
      </select><br><br>
      <button class="update-button" onclick="updateSchedule()">Update Schedule</button>
    </div>
  </div>

  <div class="tabs">
    <button class="tab-button active" onclick="openTab(event, 'lab-tab')" id="lab-tab-button">Lab Work</button>
    <button class="tab-button" onclick="openTab(event, 'analysis-tab')" id="analysis-tab-button">Data Analysis</button>
    <button class="tab-button" onclick="openTab(event, 'curation-tab')" id="curation-tab-button">Data Curation</button>
  </div>

  <div id="lab-tab" class="tab-content">
    <h2>Lab Work</h2>
    <table>
      <thead>
        <tr>
          <th>Week Number</th>
          <th>Order Number </th>
          <th>Dates</th>
          <th>Project</th>
          <th>Task</th>
          <th>Responsible</th>
        </tr>
      </thead>
      <tbody id="lab-table">
        <!-- Placeholder rows for lab work, dynamically populated by JavaScript -->
      </tbody>
    </table>
  </div>

  <div id="analysis-tab" class="tab-content">
    <h2>Data Analysis</h2>
    <table>
      <thead>
        <tr>
          <th>Week Number</th>
          <th>Order Number </th>
          <th>Dates</th>
          <th>Project</th>
          <th>Task</th>
          <th>Responsible</th>
        </tr>
      </thead>
      <tbody id="analysis-table">
        <!-- Placeholder rows for data analysis, dynamically populated by JavaScript -->
      </tbody>
    </table>
  </div>

  <div id="curation-tab" class="tab-content">
    <h2>Data Curation</h2>
    <table>
      <thead>
        <tr>
          <th>Week Number</th>
          <th>Order Number</th>
          <th>Project</th>
          <th>Task</th>
          <th>Responsible</th>
        </tr>
      </thead>
      <tbody id="curation-table">
        <!-- Placeholder rows for data curation, dynamically populated by JavaScript -->
      </tbody>
    </table>
  </div>

  <script>
  function openTab(evt, tabName) {
    // Tab switching logic
  }

function updateSchedule() {
  // Get form input values
  const week = document.getElementById('week').value;
  const order_number = document.getElementById('order_number').value;
  const project = document.getElementById('project').value;
  const task = document.getElementById('task').value;
  const responsible = document.getElementById('responsible').value;

  // Send the task data to the server
  fetch('/api/tasks', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ week, order_number, project, task, responsible })
  })
  .then(response => {
    if (response.ok) {
      // Task saved successfully, update the table dynamically
      return response.json();
    } else {
      throw new Error('Failed to save the task');
    }
  })
  .then(task => {
    // Update the table with the new task dynamically
    const { week, order_number, project, task: taskName, responsible } = task;
    const tableId = `${taskName}-table`;
    const table = document.getElementById(tableId);
    
    // Create a new row and insert cells with task details
    const row = table.insertRow();
    const weekCell = row.insertCell(0);
    const orderCell = row.insertCell(1);
    const projectCell = row.insertCell(2);
    const taskCell = row.insertCell(3);
    const responsibleCell = row.insertCell(4);

    weekCell.textContent = week;
    orderCell.textContent = order_number;
    projectCell.textContent = project;
    taskCell.textContent = taskName;
    responsibleCell.textContent = responsible;
    responsibleCell.classList.add('selected');
  })
  .catch(error => {
    console.error(error);
  });
}

  // Fetch tasks from the server and populate the tables
  fetch('/api/tasks')
    .then(response => response.json())
    .then(tasks => {
      tasks.forEach(task => {
        const { week, order_number, project, task: taskName, responsible } = task;
        const tableId = `${taskName}-table`;
        const table = document.getElementById(tableId);
        
        // Create a new row and insert cells with task details
        const row = table.insertRow();
        const weekCell = row.insertCell(0);
        const orderCell = row.insertCell(1)
        const projectCell = row.insertCell(2);
        const taskCell = row.insertCell(3);
        const responsibleCell = row.insertCell(4);

        weekCell.textContent = week;
        orderCell.textContent = order_number;
        projectCell.textContent = project;
        taskCell.textContent = taskName;
        responsibleCell.textContent = responsible;
        responsibleCell.classList.add('selected');
      });
    })
    .catch(error => {
      console.error(error);
    });

      function openTab(evt, tabName) {
    var i, tabContent, tabButtons;
    tabContent = document.getElementsByClassName("tab-content");
    for (i = 0; i < tabContent.length; i++) {
      tabContent[i].style.display = "none";
    }
    tabButtons = document.getElementsByClassName("tab-button");
    for (i = 0; i < tabButtons.length; i++) {
      tabButtons[i].classList.remove("active");
    }
    document.getElementById(tabName).style.display = "block";
    evt.currentTarget.classList.add("active");
  }
</script>
</body>
</html>
